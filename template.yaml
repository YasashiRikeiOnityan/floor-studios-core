AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Floor Studios Core

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON

Parameters:
  # プロジェクト名
  ProjectName:
    Type: String
    Default: floor-studios
  # プロジェクトタイプ
  ProjectType:
    Type: String
    Default: core
  # 環境
  Environment:
    Type: String
    Default: main
  # ドメイン名
  DomainName:
    Type: String
    Default: floor-studios.com
  # ホストゾーンID
  HostedZoneId:
    Type: String
    Default: Z00033452JLLJGRAM0F3Y

Resources:
  #########################################################
  # API用の証明書の定義
  #########################################################
  ApiCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "*.api.${DomainName}"
      DomainValidationOptions:
        - DomainName: !Sub "*.api.${DomainName}"
          HostedZoneId: !Ref HostedZoneId
      KeyAlgorithm: RSA_2048
      ValidationMethod: DNS
      CertificateTransparencyLoggingPreference: ENABLED

  #########################################################
  # Cognito UserPoolの定義
  #########################################################
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub userpool-${ProjectName}-${ProjectType}-${Environment}
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      # メールアドレスをユーザー名として使用する
      UsernameAttributes:
        - email
      # ユーザー名の大文字小文字を区別しない
      UsernameConfiguration:
        CaseSensitive: false
      # Cognitoのデフォルトメール送信を使用する
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      # メールアドレスを使用してアカウントを確認する
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailSubject: "Floor Studios - Email Verification"
        EmailMessage: | 
          Verification Code: {####}

          Please enter this code to verify your email address.

          This code is valid for 10 minutes.
      # ユーザー属性の定義
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: tenant_id
          AttributeDataType: String
          Mutable: true
          Required: false
      Policies:
        # パスワードポリシーの定義
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
          TemporaryPasswordValidityDays: 7
      LambdaConfig:
        PostConfirmation: !GetAtt CognitoPostConfirmation.Arn

  #########################################################
  # Cognito UserPool Clientの定義
  #########################################################
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub userpool-client-${ProjectName}-${ProjectType}-${Environment}
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  #########################################################
  # Cognito Identity Poolの定義
  #########################################################
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub identitypool-${ProjectName}-${ProjectType}-${Environment}
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ProviderName: !Sub "cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"
          ClientId: !Ref CognitoUserPoolClient
  
  #########################################################
  # Cognito Identity PoolのIAMロールの定義
  #########################################################
  CognitoIdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthRole.Arn
        unauthenticated: !GetAtt CognitoUnauthRole.Arn
  
  #########################################################
  # 認証済みユーザー用のIAMロール
  #########################################################
  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub role-${ProjectName}-${ProjectType}-${Environment}-cognito-auth
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: CognitoAuthorizedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:${AWS::Partition}:s3:::${S3BucketStaticAssets}/*"

  ######################################################### 
  # 未認証ユーザー用のIAMロール
  # 使用する意図はないが用意しておく
  #########################################################
  CognitoUnauthRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub role-${ProjectName}-${ProjectType}-${Environment}-cognito-unauth
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: CognitoUnauthorizedPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow 
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:${AWS::Partition}:s3:::${S3BucketStaticAssets}/public/*"

  #########################################################
  # 画像ファイルをテナントごとに保存するためのS3バケット
  #########################################################
  S3BucketStaticAssets:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub bucket-${ProjectName}-${ProjectType}-${Environment}-static-assets

  #########################################################
  # Cognitoトリガー用Lambda関数
  #########################################################
  CognitoPostConfirmation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub function-${ProjectName}-${ProjectType}-${Environment}-cognito-post-confirmation
      CodeUri: src/common/CognitoPostConfirmation/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Environment:
        Variables:
          TENANTS_TABLE_NAME: !Ref TenantsTable
          USERS_TABLE_NAME: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TenantsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminUpdateUserAttributes
              # 循環定義にならないように広い範囲で指定する（微妙...)
              Resource: !Sub "arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"
  
  #########################################################
  # CognitoにLambda関数の呼び出し権限を付与
  #########################################################
  CognitoPostConfirmationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CognitoPostConfirmation
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  #########################################################
  # API定義
  #########################################################
  FloorStudiosApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub api-${ProjectName}-${ProjectType}-${Environment}
      StageName: !Ref Environment
      Domain:
        DomainName: !Sub "${Environment}.api.${DomainName}"
        CertificateArn: !Ref ApiCertificate
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref HostedZoneId
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Origin,Access-Control-Allow-Headers,Access-Control-Allow-Methods'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
        # OPTIONSリクエストにデフォルトのAuthorizerを追加しない
        AddDefaultAuthorizerToCorsPreflight: false
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Origin,Access-Control-Allow-Headers,Access-Control-Allow-Methods'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Origin,Access-Control-Allow-Headers,Access-Control-Allow-Methods'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

  #########################################################
  # users Lambda関数の定義
  #########################################################
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub function-${ProjectName}-${ProjectType}-${Environment}-users
      CodeUri: src/api/ApiUsers/
      Handler: get.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId: !Ref FloorStudiosApi
            Path: /v1/users
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        # PostUsers:
        #   Type: Api
        #   Properties:
        #     RestApiId: !Ref FloorStudiosApi
        #     Path: /v1/users
        #     Method: post
        #     Auth:
        #       Authorizer: CognitoAuthorizer

  #########################################################
  # users/{userId} Lambda関数の定義 
  #########################################################
  UsersUserIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub function-${ProjectName}-${ProjectType}-${Environment}-users-user-id
      CodeUri: src/api/ApiUsersUserId/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
          S3_BUCKET_STATIC_ASSETS: !Ref S3BucketStaticAssets
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - S3ReadPolicy:
            BucketName: !Ref S3BucketStaticAssets
      Events:
        GetUsersUserId:
          Type: Api
          Properties:
            RestApiId: !Ref FloorStudiosApi
            Path: /v1/users/{user_id}
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        PutUsersUserId:
          Type: Api
          Properties:
            RestApiId: !Ref FloorStudiosApi
            Path: /v1/users/{user_id}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
        # DeleteUsersUserId:
        #   Type: Api
        #   Properties:
        #     RestApiId: !Ref FloorStudiosApi
        #     Path: /v1/users/{user_id}
        #     Method: delete
        #     Auth:
        #       Authorizer: CognitoAuthorizer

  #########################################################
  # specifications Lambda関数の定義
  #########################################################
  SpecificationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub function-${ProjectName}-${ProjectType}-${Environment}-specifications
      CodeUri: src/api/ApiSpecifications/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Environment:
        Variables:
          SPECIFICATIONS_TABLE_NAME: !Ref SpecificationsTable
          USERS_TABLE_NAME: !Ref UsersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SpecificationsTable
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
      Events:
        GetSpecifications:
          Type: Api
          Properties:
            RestApiId: !Ref FloorStudiosApi
            Path: /v1/specifications
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        PostSpecifications:
          Type: Api
          Properties:
            RestApiId: !Ref FloorStudiosApi
            Path: /v1/specifications
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

  #########################################################
  # Tenantsテーブルの定義
  #########################################################
  TenantsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub table-${ProjectName}-${ProjectType}-${Environment}-tenants
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: tenant_id
          AttributeType: S
      KeySchema:
        - AttributeName: tenant_id
          KeyType: HASH

  #########################################################
  # Usersテーブルの定義
  #########################################################
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub table-${ProjectName}-${ProjectType}-${Environment}-users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: tenant_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: tenant_id
          KeyType: RANGE
      # テナントIDで検索するためのGSI
      GlobalSecondaryIndexes:
        - IndexName: TenantIdIndex
          KeySchema:
            - AttributeName: tenant_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  #########################################################
  # Specificationsテーブルの定義
  #########################################################
  SpecificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub table-${ProjectName}-${ProjectType}-${Environment}-specifications
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: specification_id
          AttributeType: S
        - AttributeName: tenant_id
          AttributeType: S
      KeySchema:
        - AttributeName: specification_id
          KeyType: HASH
        - AttributeName: tenant_id
          KeyType: RANGE
      # テナントIDで検索するためのGSI
      GlobalSecondaryIndexes:
        - IndexName: TenantIdIndex
          KeySchema:
            - AttributeName: tenant_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
